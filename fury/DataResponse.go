// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fury

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDataResponse(buf []byte, offset flatbuffers.UOffsetT) *DataResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDataResponse(buf []byte, offset flatbuffers.UOffsetT) *DataResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DataResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataResponse) RequestId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataResponse) FileId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DataResponse) Chunk(obj *FileChunk) *FileChunk {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FileChunk)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DataResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DataResponseAddRequestId(builder *flatbuffers.Builder, requestId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(requestId), 0)
}
func DataResponseAddFileId(builder *flatbuffers.Builder, fileId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fileId), 0)
}
func DataResponseAddChunk(builder *flatbuffers.Builder, chunk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(chunk), 0)
}
func DataResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
