// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fury

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChunkRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsChunkRequest(buf []byte, offset flatbuffers.UOffsetT) *ChunkRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChunkRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishChunkRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsChunkRequest(buf []byte, offset flatbuffers.UOffsetT) *ChunkRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChunkRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChunkRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ChunkRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChunkRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChunkRequest) FileId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChunkRequest) ChunkIndex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkRequest) MutateChunkIndex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ChunkRequest) Priority() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChunkRequest) MutatePriority(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func ChunkRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ChunkRequestAddFileId(builder *flatbuffers.Builder, fileId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileId), 0)
}
func ChunkRequestAddChunkIndex(builder *flatbuffers.Builder, chunkIndex uint32) {
	builder.PrependUint32Slot(1, chunkIndex, 0)
}
func ChunkRequestAddPriority(builder *flatbuffers.Builder, priority byte) {
	builder.PrependByteSlot(2, priority, 0)
}
func ChunkRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
