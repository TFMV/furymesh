// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fury

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TransferStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsTransferStatus(buf []byte, offset flatbuffers.UOffsetT) *TransferStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TransferStatus{}
	x.Init(buf, n+offset)
	return x
}

func FinishTransferStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTransferStatus(buf []byte, offset flatbuffers.UOffsetT) *TransferStatus {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TransferStatus{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTransferStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TransferStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TransferStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TransferStatus) FileId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TransferStatus) ChunksReceived() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateChunksReceived(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *TransferStatus) TotalChunks() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateTotalChunks(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *TransferStatus) BytesReceived() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateBytesReceived(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *TransferStatus) TotalBytes() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateTotalBytes(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *TransferStatus) TransferRate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateTransferRate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *TransferStatus) EtaSeconds() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TransferStatus) MutateEtaSeconds(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *TransferStatus) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TransferStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func TransferStatusAddFileId(builder *flatbuffers.Builder, fileId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileId), 0)
}
func TransferStatusAddChunksReceived(builder *flatbuffers.Builder, chunksReceived uint32) {
	builder.PrependUint32Slot(1, chunksReceived, 0)
}
func TransferStatusAddTotalChunks(builder *flatbuffers.Builder, totalChunks uint32) {
	builder.PrependUint32Slot(2, totalChunks, 0)
}
func TransferStatusAddBytesReceived(builder *flatbuffers.Builder, bytesReceived uint64) {
	builder.PrependUint64Slot(3, bytesReceived, 0)
}
func TransferStatusAddTotalBytes(builder *flatbuffers.Builder, totalBytes uint64) {
	builder.PrependUint64Slot(4, totalBytes, 0)
}
func TransferStatusAddTransferRate(builder *flatbuffers.Builder, transferRate uint32) {
	builder.PrependUint32Slot(5, transferRate, 0)
}
func TransferStatusAddEtaSeconds(builder *flatbuffers.Builder, etaSeconds uint32) {
	builder.PrependUint32Slot(6, etaSeconds, 0)
}
func TransferStatusAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(status), 0)
}
func TransferStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
